{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "id":  "http://mgi.nist.gov/mgi-json-trans/v0.1",
    "$extensionSchemas": [ "http://mgi.nist.gov/mgi-json-schema/v0.1" ],
    "title": "JSON Transformations",
    "description": "This is the schema for JSON Transformation stylesheets",
    "definitions": {
        "Prefixes": {
            "description": "a mapping of prefixes to data-pointer values",
            "type": "object",
            "patternProperties": {
                "^[a-zA-Z0-9_!@#$.]+$": { "$ref": "#/definitions/DataPointer" }
            }
        },
        "DataPointer": {
            "description": "a pointer into JSON data comprised of an optional data target ($in or $context) or prefix, a colon, and a path (a JSON pointer excluding the leading slash)",
            "type": "string",
            "pattern": "^([a-zA-Z0-9_!@#$.]:)?[a-zA-Z0-9_!@#$.]+$"
        },
        "Transform": {
            "description": "a configuration of a transform that can be applied to JSON data structures",
            "type": "object",
            "properties": {
                "type": {
                    "description": "the name of the type of template this is.  This determines the other properties used to configure the transform.",
                    "type": "string",
                    "pattern": "^([a-zA-Z0-9_!@#$.])+$"
                },
                "context": {
                    "description": "an arbitrary set of named properties that can be accessed while applying a transform",
                    "notes": [
                        "The properties will be merged with the current context so that new properities will override existing ones with the same name",
                        "A transform can be alternatively applied to the context data via a data pointer that begins with '$context:'"
                    ],
                    "type": "object"
                },
                "expects": { 
                    "description":  "a list of JSON types that this transform expects",
                    "type": "array",
                    "items": { "$ref": "#/definitions/JSONType" },
                    "uniqueItems": true
                },
                "returns": {
                    "description": "the JSON type that this transform will return after being applied to the input (of an acceptable type)",
                    "$ref": "#/definitions/JSONType"
                },
                "status": {
                    "description": "a switch that control whether or how this transform can be applied",
                    "type": "string",
                    "enum": [ "enabled", "disabled" ],
                    "valueDocumenation": {
                        "enabled": {
                            "description": "the transform is available to be applied"
                        },
                        "disabled": {
                            "description": "the transform is not available to be applied; attempting to do so will result in an error."
                        }
                    },
                    "default": "enabled"
                },
                "transforms": {
                    "description": "a named list of additional transforms available to the current transform",
                    "notes": [
                        "These transforms will be merged in with the current set of available transforms, overriding existing ones with the same name"
                    ],
                    "type": "object",
                    "patternProperties": {
                        "^[a-zA-Z0-9_!@#$.]+$": { "$ref": "#/definitions/Transform" }
                    }
                },
                "templates": {
                    "description": "a named list of additional templates available to the current transform",
                    "notes": [
                        "A template is a transform that returns a string type result",
                        "These transforms will be merged in with the current set of available transforms, overriding existing ones with the same name"
                    ],
                    "type": "object",
                    "patternProperties": {
                        "^[a-zA-Z0-9_!@#$.]+$": { "$ref": "#/definitions/Transform" }
                    }
                },
                "joins": {
                    "description": "a named list of additional join templates available to the current transform",
                    "notes": [
                        "A join template is a template that requires an array of strings as its input",
                        "These transforms will be merged in with the current set of available transforms, overriding existing ones with the same name"
                    ],
                    "type": "object",
                    "patternProperties": {
                        "^[a-zA-Z0-9_!@#$.]+$": { "$ref": "#/definitions/Transform" }
                    }
                }
            }
        },
        "JSONType": {
            "description": "a name for a JSON primitive type",
            "type": "string",
            "enum": [ "string", "integer", "number", "object", "array", "boolean", "any" ]
        },
        "LiteralTransform": {
            "description": "a type of transform that emits a constant value, regardless of the input",
            "allOf": [
                { "$ref": "#/definitions/Transform" },
                {
                    "properties": {
                        "type": {
                            "enum": [ "literal" ] 
                        },
                        "value": {
                            "description": "The literal value that the transform should return",
                            "$ref": "#/definitions/AnyType" 
                        }
                    },
                    "required": [ "type", "value" ]
                }
            ]
        },
        "FunctionTransform": {
            "description": "a type of transform that calls an internal (implementation-specific) function to apply the transform",
            "allOf": [
                { "$ref": "#/definitions/Transform" },
                {
                    "properties": {
                        "type": {
                            "enum": [ "function" ] 
                        },
                        "name": {
                            "description": "the full name of function, including any namespaces, that is called when this transform is applied.",
                            "notes": [ 
                                "a $ at the start of the name is short-hand for the namespace or package that contains standard functions that come with the implementation of the transform engine implementation."
                            ],
                            "type": "string"
                        },
                        "argdesc": {
                            "description": "a description of each of the arguments that can be passed to the function when it is invoked from a transform.",
                            "type": "array",
                            "items": { "type": "string" },
                            "notes": [ 
                                "The array should have one entry per argument and the order should correspond to the order they must be provided.",
                                "This is primarily for documentation purposes; it is not used in the course of using the function."
                            ]
                        }
                    },
                    "required": [ "type", "name" ]
                }
            ]
        },
        "Pointer": {
            "description": "",
            "allOf": [
                { "$ref": "#/definitions/Transform" },
                { 
                    "properties": {
                        "item": {
                            "enum": ["pointer"]
                        },
                        "select": {
                            "description": "a data pointer to the JSON data to extract from the input.",
                            "notes": [
                                "the pointer may include prefix which can be a registered prefix that maps to another data pointer to use as a base",
                                "a prefix set to '$input' (the default if none is given) instructs that the pointer should be applied to the input document data",
                                "a prefix set to '$context' instructs that the pointer should be applied to the context data"
                            ],
                            "type": "string"
                        }
                    },
                    "required": [ "type", "select" ]
                }
            ]
        },
        "MapJoinTransform": {
            "description": "a transform that applies a transform on each of elements of an input array and then combines them with a join transform",
            "allOf": [
                { "$ref": "#/definitions/Transform" },
                { 
                    "properties": {
                        "item": {
                            "enum": ["mapjoin"]
                        },
                        "itemmap": {
                            "description": "the transform to apply to each element of the array",
                            "oneOf": [
                                { 
                                    "description": "a text-based reference to a transform",
                                    "type": "string" 
                                },
                                {
                                    "description": "a transform description object",
                                    "$ref": "#/definitions/Transform"
                                }
                            ]
                        },
                        "join": {
                            "description": "the transform to apply to the array resulting from the map transform",
                            "oneOf": [
                                { 
                                    "description": "a text-based reference to a transform",
                                    "type": "string" 
                                },
                                {
                                    "description": "a transform description object",
                                    "$ref": "#/definitions/Transform"
                                }
                            ]
                        }
                    },
                    "required": [ "type", "itemmap", "join" ]
                }
            ]
        },
        "JSONTransform": {
            "description": "converts input into a new JSON structure",
            "allOf": [
                { "$ref": "#/definitions/Transform" },
                { 
                    "properties": {
                        "item": {
                            "enum": ["json"]
                        },
                        "content": {
                            "description": "the skeleton of the output JSON data structure containing transform token where input data should be inserted.",
                            "$ref": "#/definitions/AnyType"
                        }
                    },
                    "required": [ "type", "content" ]
                }
            ]
        },
        "StringTemplateTransform": {
            "description": "",
            "allOf": [
                { "$ref": "#/definitions/Transform" },
                { 
                    "properties": {
                        "item": {
                            "enum": ["stringtemplate"]
                        },
                        "content": {
                            "description": "a string containing template tokens where input data should be inserted",
                            "type": "string"
                        }
                    },
                    "required": [ "type", "content" ]
                }
            ]
        },
        "AnyType": {
            "description": "a type representing a union of all primitive types",
            "type": [ "array", "boolean", "integer", "number", 
                      "null", "object", "string" ]
        }
    },

    "$ref": "#/definitions/Transform" 
}
