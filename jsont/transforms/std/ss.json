{
    "$schema": "http://mgi.nist.gov/mgi-json-trans/v0.1",
    "transforms": {
        "$lb": {
            "$extensionSchemas": [ "http://mgi.nist.gov/mgi-json-trans/v0.1#/definitions/LiteralTransform" ],
            "$type": "literal",
            "value": "{",
            "expects": ["any"],
            "returns": "string"
        },
        "$rb": {
            "$extensionSchemas": [ "http://mgi.nist.gov/mgi-json-trans/v0.1#/definitions/LiteralTransform" ],
            "$type": "literal",
            "value": "}",
            "expects": ["any"],
            "returns": "string"
        },
        "metaprop": {
            "$extensionSchemas": [ "http://mgi.nist.gov/mgi-json-trans/v0.1#/definitions/NativeTransform" ],
            "$type": "native",
            "impl": "$std.metaprop",
            "description": "prepend a given string with a $ character",
            "notes": [
                "Using this function within a template allows one to produce $-prepended name without invoking its special meaning within a transform",
                "Example: metaprop('type') produces '$type'"
            ],
            "argv_supported": [
                {
                    "name": "label",
                    "description": "the string to prepend (default: the current input)",
                    "type": "string"
                }
            ]            
        },
        "tostr": {
            "$extensionSchemas": [ "http://mgi.nist.gov/mgi-json-trans/v0.1#/definitions/NativeTransform" ],
            "$type": "native",
            "impl": "$std.tostr",
            "description": "convert input data to a string",
            "argv_supported": [
                {
                    "name": "data",
                    "description": "the data to convert (default: the current input data)",
                    "type": "any"
                }
            ],
            "expects": ["any"],
            "returns": "string"
        },
        "tobool": {
            "$extensionSchemas": [ "http://mgi.nist.gov/mgi-json-trans/v0.1#/definitions/NativeTransform" ],
            "$type": "native",
            "impl": "$std.tobool",
            "description": "convert input data to a boolean: a boolean value is unchanged; a null, an empty string, an empty object, an empty array, or a 0 will be converted to false; all others will be converted to True",
            "argv_supported": [
                {
                    "name": "data",
                    "description": "the data to convert (default: the current input data)",
                    "type": "any"
                }
            ],
            "expects": ["any"],
            "returns": "boolean"            
        },
        "indent": {
            "$extensionSchemas": [ "http://mgi.nist.gov/mgi-json-trans/v0.1#/definitions/NativeTransform" ],
            "$type": "native",
            "impl": "$std.indent",
            "description": "prepend a specified number of spaces in front of the input text.",
            "argv_supported": [
                {
                    "name": "indlen",
                    "description": "the number of spaces to insert at the front of the text",
                    "type": "string"
                },
                {
                    "name": "data",
                    "description": "the data to indent (default: the current input data)",
                    "type": "any"
                }
            ],
            "expects": ["string"],
            "returns": "string"
        },
        "fill": {
            "$type": "apply",
            "transform": "newline",
            "input": {
                "$type": "apply",
                "transform": {
                    "$type": "map",
                    "itemmap": "indent(5)"
                },
                "input": "wrap(70)"
            }
        },
        "apply": {
            "$extensionSchemas": [ "http://mgi.nist.gov/mgi-json-trans/v0.1#/definitions/NativeTransform" ],
            "$type": "native",
            "impl": "$std.applytransform",
            "argv_supported": [
                {
                    "required": true,
                    "name": "transform",
                    "description": "the name of the transform to apply",
                    "type": "string"
                },
                {
                    "name": "select",
                    "description": "pointer to data to use as new input",
                    "type": "string"
                },
                {
                    "description": "extra arguments to pass to the transform implementation",
                    "type": "remaining"
                }
            ],
            "expects": ["any"],
            "returns": "any"
        },
        "extract": {
            "$extensionSchemas": [ "http://mgi.nist.gov/mgi-json-trans/v0.1#/definitions/CallableTransform" ],
            "$type": "callable",
            "transform_tmpl": {
                "$type": "extract",
                "select": { "$val": "/0" }
            },
            "conf_args_index": [ 0 ],
            "argv_supported": [
                {
                    "required": true,
                    "name": "select",
                    "type": "string"
                }
            ],
            "expects": ["any"],
            "returns": "any"
        },
        "map": {
            "$extensionSchemas": [ "http://mgi.nist.gov/mgi-json-trans/v0.1#/definitions/CallableTransform" ],
            "$type": "callable",
            "transform_tmpl": {
                "$type": "map",
                "itemmap": { "$val": "/0" }
            },
            "conf_args_index": [ 0 ],
            "argv_supported": [
                {
                    "name": "itemmap",
                    "type": "string"
                }
            ],
            "expects": ["array"],
            "returns": "array"            
        },
        "wrap": {
            "$extensionSchemas": [ "http://mgi.nist.gov/mgi-json-trans/v0.1#/definitions/NativeTransform" ],
            "$type": "native",
            "impl": "$std.wrap",
            "description": "break text into an array of lines of limited length",
            "argv_supported": [
                {
                    "name": "maxlen",
                    "description": "the maximum length of a line in number of characters",
                    "type": "integer"
                },
                {
                    "name": "text",
                    "description": "the text to break up (default: the current input data)",
                    "type": "string"
                }
            ],
            "expects": ["string"],
            "returns": "array"
        },
        "concat": {
            "$extensionSchemas": [ "http://mgi.nist.gov/mgi-json-trans/v0.1#/definitions/NativeTransform" ],
            "$type": "native",
            "impl": "$std.delimit",
            "args": [""],
            "expects": ["array"],
            "returns": "string"
        },
        "delimit": {
            "$extensionSchemas": [ "http://mgi.nist.gov/mgi-json-trans/v0.1#/definitions/NativeTransform" ],
            "$type": "native",
            "impl": "$std.delimit",
            "argv_supported": [
                {
                    "name": "delim",
                    "description": "the string to use as a delimiter",
                    "type": "string"
                }
            ],
            "expects": ["array"],
            "returns": "string"
        },
        "newline": {
            "$extensionSchemas": [ "http://mgi.nist.gov/mgi-json-trans/v0.1#/definitions/NativeTransform" ],
            "$type": "native",
            "impl": "$std.delimit",
            "description": "places each item on a different line",
            "args": [ "\n" ],
            "expects": ["array"],
            "returns": "string"
        },
        "doubleNewline": {
            "$extensionSchemas": [ "http://mgi.nist.gov/mgi-json-trans/v0.1#/definitions/NativeTransform" ],
            "$type": "native",
            "impl": "$std.delimit",
            "description": "places a blank line between each item",
            "args": [ "\n\n" ],
            "expects": ["array"],
            "returns": "string"
        },
        "propNames": {
            "$extensionSchemas": [ "http://mgi.nist.gov/mgi-json-trans/v0.1#/definitions/NativeTransform" ],
            "$type": "native",
            "impl": "$std.prop_names",
            "description": "places a blank line between each item",
            "expects": ["object"],
            "returns": "array"
        },
        "metaprop": {
            "$extensionSchemas": [ "http://mgi.nist.gov/mgi-json-trans/v0.1#/definitions/NativeTransform" ],
            "$type": "native",
            "impl": "$std.metaprop",
            "description": "return the given string prepended with a $ symbol.",
            "expects": ["string"],
            "returns": "string"
        },
        "isdefined": {
            "$extensionSchemas": [ "http://mgi.nist.gov/mgi-json-trans/v0.1#/definitions/NativeTransform" ],
            "$type": "native",
            "impl": "$std.isdefined",
            "description": "return True if the data pointed to by a selection is defined.",
            "notes": [
                "This transform would normally be invoked in function form so that a selection can be provided.  Without a selection, this transform always returns True as there is always a current input data defined."
            ],
            "argv_supported": [
                {
                    "name": "select",
                    "description": "a data pointer to the data one wants to if exists",
                    "type": "string"
                }
            ],
            "expects": ["any"],
            "returns": "boolean"
        },
        "istype": {
            "$extensionSchemas": [ "http://mgi.nist.gov/mgi-json-trans/v0.1#/definitions/NativeTransform" ],
            "$type": "native",
            "impl": "$std.istype",
            "description": "return True if the data pointed to by a selection is of a particular JSON type.",
            "argv_supported": [
                {
                    "name": "type",
                    "description": "the name of the JSON type (object, array, string, number, integer, or null) to test for",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "select",
                    "description": "a data pointer to the data one wants to if exists",
                    "type": "string"
                }
            ],
            "expects": ["any"],
            "returns": "boolean"
        },
        "isobject": {
            "$extensionSchemas": [ "http://mgi.nist.gov/mgi-json-trans/v0.1#/definitions/ApplyTransform" ],
            "$type": "apply",
            "transform": "istype",
            "args": [ "object" ],
            "description": "return True if the data pointed to by a selection is a JSON object.",
            "notes": [
                "This transform would normally be invoked in function form so that a selection can be provided.  Without a selection, this transform always returns True as there is always a current input data defined."
            ],
            "argv_supported": [
                {
                    "name": "select",
                    "description": "a data pointer to the data one wants to if exists",
                    "type": "string"
                }
            ],
            "expects": ["any"],
            "returns": "boolean"
        },
        "isarray": {
            "$extensionSchemas": [ "http://mgi.nist.gov/mgi-json-trans/v0.1#/definitions/ApplyTransform" ],
            "$type": "apply",
            "transform": "istype",
            "args": [ "array" ],
            "description": "return True if the data pointed to by a selection is a JSON array.",
            "notes": [
                "This transform would normally be invoked in function form so that a selection can be provided.  Without a selection, this transform always returns True as there is always a current input data defined."
            ],
            "argv_supported": [
                {
                    "name": "select",
                    "description": "a data pointer to the data one wants to if exists",
                    "type": "string"
                }
            ],
            "expects": ["any"],
            "returns": "boolean"
        },
        "isstring": {
            "$extensionSchemas": [ "http://mgi.nist.gov/mgi-json-trans/v0.1#/definitions/ApplyTransform" ],
            "$type": "apply",
            "transform": "istype",
            "args": [ "string" ],
            "description": "return True if the data pointed to by a selection is a JSON string.",
            "notes": [
                "This transform would normally be invoked in function form so that a selection can be provided.  Without a selection, this transform always returns True as there is always a current input data defined."
            ],
            "argv_supported": [
                {
                    "name": "select",
                    "description": "a data pointer to the data one wants to if exists",
                    "type": "string"
                }
            ],
            "expects": ["any"],
            "returns": "boolean"
        },
        "isnumber": {
            "$extensionSchemas": [ "http://mgi.nist.gov/mgi-json-trans/v0.1#/definitions/ApplyTransform" ],
            "$type": "apply",
            "transform": "istype",
            "args": [ "number" ],
            "description": "return True if the data pointed to by a selection is a JSON number.",
            "notes": [
                "This transform would normally be invoked in function form so that a selection can be provided.  Without a selection, this transform always returns True as there is always a current input data defined."
            ],
            "argv_supported": [
                {
                    "name": "select",
                    "description": "a data pointer to the data one wants to if exists",
                    "type": "string"
                }
            ],
            "expects": ["any"],
            "returns": "boolean"
        },
        "isinteger": {
            "$extensionSchemas": [ "http://mgi.nist.gov/mgi-json-trans/v0.1#/definitions/ApplyTransform" ],
            "$type": "apply",
            "transform": "istype",
            "args": [ "integer" ],
            "description": "return True if the data pointed to by a selection is a JSON integer.",
            "notes": [
                "This transform would normally be invoked in function form so that a selection can be provided.  Without a selection, this transform always returns True as there is always a current input data defined."
            ],
            "argv_supported": [
                {
                    "name": "select",
                    "description": "a data pointer to the data one wants to if exists",
                    "type": "string"
                }
            ],
            "expects": ["any"],
            "returns": "boolean"
        },
        "isnull": {
            "$extensionSchemas": [ "http://mgi.nist.gov/mgi-json-trans/v0.1#/definitions/ApplyTransform" ],
            "$type": "apply",
            "transform": "istype",
            "args": [ "null" ],
            "description": "return True if the data pointed to by a selection is a JSON null.",
            "notes": [
                "This transform would normally be invoked in function form so that a selection can be provided.  Without a selection, this transform always returns True as there is always a current input data defined."
            ],
            "argv_supported": [
                {
                    "name": "select",
                    "description": "a data pointer to the data one wants to if exists",
                    "type": "string"
                }
            ],
            "expects": ["any"],
            "returns": "boolean"
        },
        "isboolean": {
            "$extensionSchemas": [ "http://mgi.nist.gov/mgi-json-trans/v0.1#/definitions/ApplyTransform" ],
            "$type": "apply",
            "transform": "istype",
            "args": [ "boolean" ],
            "description": "return True if the data pointed to by a selection is a JSON boolean.",
            "notes": [
                "This transform would normally be invoked in function form so that a selection can be provided.  Without a selection, this transform always returns True as there is always a current input data defined."
            ],
            "argv_supported": [
                {
                    "name": "select",
                    "description": "a data pointer to the data one wants to if exists",
                    "type": "string"
                }
            ],
            "expects": ["any"],
            "returns": "boolean"
        }
    }
}
